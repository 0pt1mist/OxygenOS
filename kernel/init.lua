-- kernel/init.lua
-- OxygenOS v0.1 ‚Äî Minimal Boot (BIOS-compatible, no OpenOS dependency)

-- === –ü—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞–ø—É—â–µ–Ω–æ –≤ OpenComputers? ===
if not component or not component.list then
  error("OxygenOS requires OpenComputers!", 0)
end

-- === –ú–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å–µ—Ö –¥–∏—Å–∫–æ–≤ ===
print("Mounting filesystems...")
for address in component.list("filesystem") do
  -- –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–∫—É —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏ (–Ω–∞–¥—ë–∂–Ω–æ)
  local proxy = component.proxy(address)
  local label = proxy.getLabel() or "disk"
  local mountPoint = "/" .. label

  -- –°–æ–∑–¥–∞—ë–º —Ç–æ—á–∫—É –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
  -- –í BIOS –Ω–µ—Ç filesystem.makeDirectory, –ø–æ—ç—Ç–æ–º—É –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
  -- –î–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ / —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç

  -- –û—Ç–º–æ–Ω—Ç–∏—Ä—É–µ–º –∏ —Å–º–æ–Ω—Ç–∏—Ä—É–µ–º
  pcall(component.invoke, address, "mount", mountPoint)
end

-- === –ü—Ä–æ–≤–µ—Ä–∫–∞: —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ /bin/shell? ===
-- –ò—â–µ–º –ª—é–±–æ–π –¥–∏—Å–∫, –≥–¥–µ –µ—Å—Ç—å /bin/shell
local shellFound = false
for address in component.list("filesystem") do
  local proxy = component.proxy(address)
  if proxy.exists("/bin/shell") then
    -- –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –¥–∏—Å–∫ —Å–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ –∫–æ—Ä–µ–Ω—å
    -- (–æ–±—ã—á–Ω–æ —ç—Ç–æ —Ç–æ—Ç, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å)
    shellFound = true
    break
  end
end

if not shellFound then
  error("Shell not found! Corrupted or incomplete installation.", 0)
end

-- === –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ ===
print("\27[36müå¨Ô∏è  OxygenOS v0.1\27[0m")
print("Unix-like OS for OpenComputers 1.12.2")
print("")

-- === –ó–∞–ø—É—Å–∫ shell ===
-- –í BIOS –Ω–µ—Ç dofile, –Ω–æ –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å loadfile + load
local shellPath = "/bin/shell"
local fileHandle = io.open(shellPath, "r")
if not fileHandle then
  error("Cannot open shell script: " .. shellPath, 0)
end

local content = fileHandle:read("*a")
fileHandle:close()

local fn, err = load(content, "@shell", "t", {})
if not fn then
  error("Shell syntax error: " .. tostring(err), 0)
end

-- –ó–∞–ø—É—Å–∫–∞–µ–º shell –≤ –ø–µ—Å–æ—á–Ω–∏—Ü–µ
local success, err = pcall(fn)
if not success then
  print("Shell crashed: " .. tostring(err))
  print("Dropping to emergency prompt...")

  -- –ü—Ä–æ—Å—Ç–æ–π emergency shell
  while true do
    io.write("EMERGENCY# ")
    local line = io.read()
    if line == "reboot" then
      os.exit()
    elseif line == "ls" then
      for addr in component.list("filesystem") do
        local p = component.proxy(addr)
        for item in p.list("/") do print(item) end
      end
    else
      print("Unknown command")
    end
  end
end